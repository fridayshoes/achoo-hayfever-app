#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('achoo-hayfever-app:server');
var http = require('http');
var mongoose = require("mongoose");

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Connect to MongoDB - Local MongoDB config
 

var mongoDbUrl = process.env.MONGODB_URL || "mongodb://0.0.0.0/achoo";
mongoose.connect(mongoDbUrl, {
  useNewUrlParser: true,
  useUnifiedTopology: true,
});

var db = mongoose.connection;
db.on("error", console.error.bind(console, "MongoDB connection error:")); **/


/**
 * Connect to MongoDB - Atlas Cloud MongoDB config
 **/

 const url = `mongodb+srv://fridayshoes:TJmsiJEqcrSDceLh@cluster0.8ny2yip.mongodb.net/?`;

 const connectionParams={
     useNewUrlParser: true,
     useUnifiedTopology: true
    //  serverApi: ServerApiVersion.v1
 }
 mongoose.connect(url,connectionParams)
     .then( () => {
         console.log('Connected to the database ')
     })
     .catch( (err) => {
         console.error(`Error connecting to the database. n${err}`);
     }) 

 /**const { MongoClient, ServerApiVersion } = require('mongodb');
 const uri = "mongodb+srv://fridayshoes:TJmsiJEqcrSDceLh@cluster0.8ny2yip.mongodb.net/?retryWrites=true&w=majority";
 const client = new MongoClient(uri, { useNewUrlParser: true, useUnifiedTopology: true, serverApi: ServerApiVersion.v1 });
 client.connect(err => {
   const collection = client.db("test").collection("achoo");
   // perform actions on the collection object
   client.close();
 }); */


/**
 * Create HTTP server.
 */

var server = http.createServer(app);

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
